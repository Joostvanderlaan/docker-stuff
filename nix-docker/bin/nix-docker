#!/usr/bin/python

import os.path
import subprocess
import argparse
import sys
import shutil
import tempfile

parser = argparse.ArgumentParser(description='Build Docker images with Nix', prog='nix-docker')
parser.add_argument('configuration', nargs='?', help='configuration.nix file to build', default="configuration.nix")
parser.add_argument('-b', action='store_true', help="Build a docker image")
parser.add_argument('-t', help='Image name', default="nix-docker-build")
parser.add_argument('--from', help="Image to use as a base image", default="busybox")
parser.add_argument('-f', action='store_true', help="Force nix-docker into something it does not what to do.")

args = parser.parse_args()

base_image = getattr(args, "from")
configuration_file = args.configuration
image_name = args.t
full_build = args.b

temp_dir = tempfile.mkdtemp()

nix_closure_temp = "%s/nix-closure" % temp_dir
force = args.f

root_path = os.path.normpath(os.path.realpath(sys.argv[0]) + "/../..")

def build():
    print "Building Nix closure for the image..."
    if args.b:
        mountBuild = "false"
    else:
        mountBuild = "true"
    cmd = ["nix-build", "%s/docker.nix" % root_path, '-I', 'configuration=' + configuration_file, "--arg", "mountBuild", mountBuild, "--argstr", "name", image_name, "--argstr", "baseImage", base_image]
    if full_build:
        cmd.append("--no-out-link")
    nix_path = subprocess.check_output(cmd)
    return nix_path.strip()

def get_available_nix_paths():
    try:
        paths_string = subprocess.check_output(["docker", "run", base_image, "/bin/ls", "/nix/store"])
        return paths_string.strip().split("\n")
    except:
        return []

def cleanup():
    subprocess.check_call(["rm", "-rf", temp_dir])

def copy_closure_and_build(package_nix_path, available_paths):
    paths = subprocess.check_output(["nix-store", "-qR", package_nix_path]).strip().split("\n")
    print "Available", available_paths
    paths_to_copy = filter(lambda path: not path[len("/nix/store/"):] in available_paths, paths)
    print "New Nix store paths to copy to image:"
    for path in paths_to_copy:
        print "  ", path
    os.mkdir(nix_closure_temp)
    cmd = ["cp", "-r"]
    cmd.extend(paths_to_copy)
    cmd.append(nix_closure_temp)
    shutil.copyfile("%s/Dockerfile" % package_nix_path, "%s/Dockerfile" % temp_dir)
    subprocess.check_call(cmd)
    subprocess.check_call(["chown", "-R", "root:root", nix_closure_temp])
    subprocess.check_call(["docker", "build", "-rm=true", "-t", image_name, temp_dir])
    cleanup()

if __name__ == '__main__':
    if full_build and os.getenv("USER") != "root" and not force:
        print "When doing a full build you need to run nix-docker as root. Rerun this command with 'sudo -E nix-docker ...'"
        sys.exit(1)

    if not os.path.exists(configuration_file):
        print "Could not find configuration file: %s" % configuration_file
        sys.exit(1)

    package_nix_path = build()
    if full_build:
        available_paths = get_available_nix_paths()
        copy_closure_and_build(package_nix_path, available_paths)
        print "To run: sudo docker run -t -i", image_name
    else:
        print "Result in", package_nix_path, "test with sudo ./result/sbin/docker-run"
        print "To deploy: nix-copy-closure -s root@<machine>", package_nix_path
        print "To run:    ssh root@<machine>", package_nix_path + "/sbin/docker-run -d"